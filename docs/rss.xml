<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>新之助Blog</title><link>https://2064878930.github.io</link><description>Hi 今天开心了吗</description><copyright>新之助Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://pic1.zhimg.com/80/v2-7a75440faf7361cf6dbb3f51ca79bbcd_720w.webp?source=1940ef5c</url><title>avatar</title><link>https://2064878930.github.io</link></image><lastBuildDate>Thu, 19 Dec 2024 02:00:45 +0000</lastBuildDate><managingEditor>新之助Blog</managingEditor><ttl>60</ttl><webMaster>新之助Blog</webMaster><item><title>JavaScript 数据时间与当前时间对比</title><link>https://2064878930.github.io/post/JavaScript%20-shu-ju-shi-jian-yu-dang-qian-shi-jian-dui-bi.html</link><description>代码实现的功能为：` 根据判断返回不同的字符串`&#13;
&#13;
```javascript&#13;
formatDisplayTime(timestamp) {&#13;
				const now = new Date()&#13;
				const date = new Date(timestamp)&#13;
				&#13;
				// 转换为同一时区的日期字符串进行比较&#13;
				const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime()&#13;
				const yesterday = today - 24 * 60 * 60 * 1000&#13;
				const targetDate = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime()&#13;
				&#13;
				// 格式化具体时间&#13;
				const hours = date.getHours().toString().padStart(2, '0')&#13;
				const minutes = date.getMinutes().toString().padStart(2, '0')&#13;
				const timeStr = `${hours}:${minutes}`&#13;
				&#13;
				if (targetDate === today) {&#13;
					return `今天 ${timeStr}`&#13;
				} else if (targetDate === yesterday) {&#13;
					return `昨天 ${timeStr}`&#13;
				} else {&#13;
					const month = (date.getMonth() + 1).toString().padStart(2, '0')&#13;
					const day = date.getDate().toString().padStart(2, '0')&#13;
					&#13;
					// 判断是否是当前年份&#13;
					if (date.getFullYear() === now.getFullYear()) {&#13;
						return `${month}-${day} ${timeStr}`&#13;
					} else {&#13;
						return `${date.getFullYear()}-${month}-${day} ${timeStr}`&#13;
					}&#13;
				}&#13;
			}&#13;
```&#13;
&#13;
调用&#13;
&#13;
```&#13;
:time='formatDisplayTime(item.createTime)'&#13;
```&#13;
&#13;
绑定并传入时间与当前时间对比&#13;
&#13;
| 时间                 | 显示                    |&#13;
| -------------------- | ----------------------- |&#13;
| 当天                 | 今天 xx:xx              |&#13;
| 昨天                 | 昨天 xx:xx              |&#13;
| 今年（非今天与昨天） | 月：日                  |&#13;
| 非今年               | 原样不动 保持最完整数据 |&#13;
&#13;
。</description><guid isPermaLink="true">https://2064878930.github.io/post/JavaScript%20-shu-ju-shi-jian-yu-dang-qian-shi-jian-dui-bi.html</guid><pubDate>Fri, 29 Nov 2024 11:20:40 +0000</pubDate></item><item><title>使用 PyInstaller 打包 Python 程序</title><link>https://2064878930.github.io/post/shi-yong-%20PyInstaller%20-da-bao-%20Python%20-cheng-xu.html</link><description># PyInstaller 使用指南&#13;
&#13;
PyInstaller是一个流行的Python打包工具，可以将Python应用程序及其依赖项打包成一个独立的可执行文件。</description><guid isPermaLink="true">https://2064878930.github.io/post/shi-yong-%20PyInstaller%20-da-bao-%20Python%20-cheng-xu.html</guid><pubDate>Thu, 28 Nov 2024 03:03:09 +0000</pubDate></item><item><title>Vite创建项目</title><link>https://2064878930.github.io/post/Vite-chuang-jian-xiang-mu.html</link><description># Vite创建项目&#13;
&#13;
&#13;
&#13;
1.首先，确保你已经安装了 Node.js 和 npm（Node.js 的包管理器）。</description><guid isPermaLink="true">https://2064878930.github.io/post/Vite-chuang-jian-xiang-mu.html</guid><pubDate>Mon, 08 Jul 2024 08:08:49 +0000</pubDate></item><item><title>人声分离工具</title><link>https://2064878930.github.io/post/ren-sheng-fen-li-gong-ju.html</link><description>1.[NovaMSS | 新一代音乐源分离工具](https://novamss.com/)&#13;
&#13;
![image-20240408020945932](https://raw.gitmirror.com/2064878930/blogimg/main/typora/image-20240408020945932.png)&#13;
&#13;
` 便捷` ` 中文界面` ` 效果较差` ` 有收费`&#13;
&#13;
2.[The Ultimate Vocal Remover Application](https://ultimatevocalremover.com/)&#13;
&#13;
![image-20240408021454055](https://raw.gitmirror.com/2064878930/blogimg/main/typora/image-20240408021454055.png)&#13;
&#13;
` 效果好` ` 没中文` ` 免费`。</description><guid isPermaLink="true">https://2064878930.github.io/post/ren-sheng-fen-li-gong-ju.html</guid><pubDate>Sun, 07 Apr 2024 18:17:40 +0000</pubDate></item><item><title>Ubuntu安装Python</title><link>https://2064878930.github.io/post/Ubuntu-an-zhuang-Python.html</link><description>出现 ` 权限问题` 进入超级用户&#13;
&#13;
```&#13;
sudo -i&#13;
```&#13;
&#13;
------&#13;
&#13;
安装依赖&#13;
&#13;
```&#13;
apt-get install gcc&#13;
apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev  libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev   xz-utils tk-dev&#13;
```&#13;
&#13;
然后下载python版本&#13;
&#13;
```&#13;
wget -c https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz&#13;
```&#13;
&#13;
将安装包移动到指定目录下&#13;
&#13;
```&#13;
mv Python-3.6.2.tgz /usr/local&#13;
```&#13;
&#13;
解压安装包并重命名&#13;
&#13;
```&#13;
cd /usr/local&#13;
tar -xvzf Python-3.6.2.tgz&#13;
mv Python-3.6.2 Python&#13;
```&#13;
&#13;
进入Python并安装&#13;
&#13;
```&#13;
cd Python &#13;
# 添加配置&#13;
./configure --prefix=/usr/python&#13;
# 安装Python &#13;
make&amp;&amp;make install&#13;
apt-get install install python3-pip&#13;
```&#13;
&#13;
新建软链接&#13;
&#13;
```&#13;
ln -s /usr/python/bin/python3 /usr/bin/python&#13;
ln -s /usr/python/bin/pip  /usr/bin/pip&#13;
```&#13;
&#13;
指定pip安装镜像为国内源（阿里源）&#13;
&#13;
```&#13;
# 进入用户目录&#13;
cd &#13;
mkdir .pip&#13;
vi pip.conf&#13;
# 将以下内容写入到pip.conf文件中&#13;
[global]&#13;
index-url = http://mirrors.aliyun.com/pypi/simple/&#13;
[install]&#13;
trusted-host=mirrors.aliyun.com&#13;
```&#13;
&#13;
。</description><guid isPermaLink="true">https://2064878930.github.io/post/Ubuntu-an-zhuang-Python.html</guid><pubDate>Wed, 27 Mar 2024 06:20:10 +0000</pubDate></item></channel></rss>